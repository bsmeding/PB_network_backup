---
- name: Backup configuration 
  hosts: all
  gather_facts: no
  connection: network_cli
  vars:
    config_output_dir: "./CFGS/{{ inventory_hostname }}"
    config_history_subdir: "historie"
    file_prefix: "{{ inventory_hostname }}"
    file_suffix: ".config"
    ansible_network_os: 'ios'
    ansible_become_method: enable
  tasks:
    - name: Backup folder for {{ inventory_hostname }}
      local_action: file path={{config_output_dir}}/{{ config_history_subdir }} state=directory
      run_once: yes
      check_mode: no
      changed_when: no

    - name: Set Date
      local_action:
        module: set_fact
        timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

    - name: run show running-config on remote devices
      ios_command:
        commands: show running
        provider: "{{ creds_core_ssh }}"
      register: config
      when: "(ansible_network_os == 'ios' or ansible_network_os  == 'nxos')"

    - name: Check if latest backup file exist for comparison
      stat:
        path: "{{ config_output_dir }}/{{ file_prefix }}{{ file_suffix }}"
      register: stat_result

    - name: Register latest config file
      set_fact:
        last_config: "{{ lookup('file', '{{ config_output_dir }}/{{ file_prefix }}{{ file_suffix }}') }}"
      when: stat_result.stat.exists == True
    
    - name: Compare last file with current state (IOS-core) << YOU MUST USE --diff IN PLAYBOOK EXECUTION
      ios_config:
        provider: "{{ creds_core_ssh }}"
        diff_against: intended
        intended_config: "{{ last_config }}"
      when: stat_result.stat.exists == True and use_NAPALM == False
      register: config_diff
      notify: "save new config"

    - name: Save first config file
      copy:
        content: "{{ config.stdout[0] }}"
        dest: "{{ config_output_dir }}/{{ file_prefix }}{{ file_suffix }}"
      when: stat_result.stat.exists == False




  handlers:

    - name: save old config
      copy:
        content: "{{ last_config }}"
        dest: "{{ config_output_dir }}/{{ config_history_subdir }}/{{ timestamp }}_{{ file_prefix }}{{ file_suffix }}"
      listen: "save new config"

    - name: save current config
      copy:
        content: "{{ config.stdout[0] }}"
        dest: "{{ config_output_dir }}/{{ file_prefix }}{{ file_suffix }}"
      listen: "save new config"


